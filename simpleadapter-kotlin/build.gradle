apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'com.github.dcendents.android-maven'

group='com.github.deckyfx'


android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // NOTE: test libraries
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    // NOTE: support libraries
    provided "com.android.support:appcompat-v7:$android_support_version"
    provided "com.android.support:design:$android_support_version"
    provided "com.android.support:recyclerview-v7:$android_support_version"
    provided "com.android.support:support-v4:$android_support_version"

    // NOTE: 3rd parties
    provided 'com.google.code.gson:gson:2.8.2'
    provided 'com.squareup.moshi:moshi:1.5.0'
    provided 'com.fasterxml.jackson.core:jackson-databind:2.8.4'
    provided 'com.fasterxml.jackson.core:jackson-core:2.8.4'
    provided 'com.fasterxml.jackson.core:jackson-annotations:2.8.4'
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// uncomment to build a jar file in addition to the default aar file
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    def task = project.tasks.create "jar${name.capitalize()}", Jar
    task.dependsOn variant.javaCompile
    task.from variant.javaCompile.destinationDir
    artifacts.add('archives', task);
}